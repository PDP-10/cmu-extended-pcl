COMMAND PQ;
!------------------------------------------------------------------------
! Purpose:
!	Append files with header for submission to printer queue.
!
! Usage:
!	PQ [switches] filelist
!
! Remarks:
!	If the  file  specification  is omitted,  then  *.*.*  is
!	assumed.
!
!	The switch /COPIES:nnn may be given if more than one copy
!	of each file is required.
!
!	The switch /HEADER:nn will cause the insertion of a  page
!	header every nn  lines (nn  = 62 by  default if  omitted)
!	containing the file name and page number.
!	
!	The       switches        /SINCE:date_and_time        and
!	/BEFORE:date_and_time may  be  used to  select  files  by
!	write date and time.  The switch values may be any  valid
!	DEC-20 date  and time  strings, or  YESTERDAY, TODAY,  or
!	TOMORROW (time 00:00:01), or past day of week (MONDAY  ..
!	SUNDAY), or NOW (current time).  The defaults are
!
!	/SINCE:first_day_and_time_of_clock 
!	and 
!	/BEFORE:NOW
!
! Author:
!	Nelson H.F. Beebe, Department of Physics, University of Utah,
!	Salt Lake City, UT 84112.
!
! Date:
!	[18-Oct-82]
!
!------------------------------------------------------------------------
BEGIN

EXTERNAL INTEGER PROCEDURE general_time_and_date_parse;

INTEGER
     before_time_and_date,
     copies,
     copy_count,
     curtad,
     done,
     ff_loc,
     file_count,
     footer,
     header,
     InFileId,
     line_number,
     NO,
     OutFileId,
     page_number,
     page_size,
     print,
     select_time_and_date,
     since_time_and_date,
     YES;

STRING
     bs,
     clock_start,
     command_echo,
     date_string,
     ext,
     ff,
     output_file,
     page_header,
     printed_by_line,
     record,
     temporary_file;


NO = 0;
YES = 1;
curtad = $CURTAD;

before_time_and_date = curtad;
bs = $CVITC(8);
clock_start = $OUTPUTTAD(0);
copies = 1;
done = NO;
ff = $CVITC(12);
file_count = 0;
header = NO;
footer = NO;
page_header = ""; 
print = YES;
page_size = 0;
select_time_and_date = NO;
since_time_and_date = NO;
temporary_file = $STRING($TERMNUMBER) + "-APPEND.TMP;T";
output_file = $STRING($TERMNUMBER) + ".LST.-1";
OutFileId = $Open (output_file,$Output);
CALL $Close (OutFileId);
output_file = $STRING($TERMNUMBER) + ".LST.0";
printed_by_line = " " + bs + "Printed by " + $USERNAME + 
     " on " + $DATE + " " + $TIME +
     $CRLF + " ----------------------------------------" +
     "----------------------------------------" + $CRLF;

GUIDE "files";

WHILE done = NO DO PARSE(
SWITCH( WORDS(
     BEFORE::1,
     SINCE::2,
     COPIES::3,
     PRINT:4,
     NOPRINT:5,
     HEADER::6,
     NOHEADER:7,
     FOOTER:8,
     NOFOOTER:9),STDHELP):
     BEGIN
     CASE $VALUE FROM 1 TO 9 OF BEGIN
     [1]:	BEGIN
		before_time_and_date = 
			GENERAL_TIME_AND_DATE_PARSE(curtad,"NOW",0);
		select_time_and_date = YES
		END;
     [2]:	BEGIN
		since_time_and_date =
			GENERAL_TIME_AND_DATE_PARSE(curtad,clock_start,0);
		select_time_and_date = YES
		END;
     [3] : PARSE (NUMBER (DEFAULT "1",STDHELP) : copies = $VALUE);
     [4] : print = YES;
     [5] : print = NO;
     [6] : PARSE (NUMBER (DEFAULT "62",HELP "lines/page") : 
	       page_size = $VALUE);
     [7] : page_size = 0;
     [8] : footer = YES;
     [9] : footer = NO
     END; ! CASE
     END; ! SWITCH

EOL (HELP "file specifications") : ABORT "No files specified";

OTHERWISE : done = YES);

PARSE (
FILELIST (HELP "List of files to be appended",
     INPUT,
     DEFAULT_DEV "DSK",
     DEFAULT_NAM "*",
     DEFAULT_EXT "*") : NOP);

IF page_size > 0 THEN 
     BEGIN
     IF page_size < 15 THEN page_size = 15;
     header = YES;
     IF footer = YES THEN page_size = page_size - 3
     END;
IF select_time_and_date = YES THEN
DISPLAY "Print files written SINCE " + $OUTPUTTAD(since_time_and_date) +
" and BEFORE " + $OUTPUTTAD(before_time_and_date);

DO   IF $FileInfo_I(-1,12) >= since_time_and_date 
     THEN IF $FileInfo_I(-1,12) < before_time_and_date
     THEN BEGIN
	  ext = $file_typ($parse);
	  IF ext = "BIN" THEN GOTO cycle;
	  IF ext = "EXE" THEN GOTO cycle;
	  IF ext = "DIRECTORY" THEN GOTO cycle;
	  IF ext = "REL" THEN GOTO cycle;
	  copy_count = 0;
	  WHILE copy_count < copies DO 
	       BEGIN ! make next copy
	       file_count = file_count + 1;
	       page_header = " " + bs + 
		    $FileInfo_S(-1,64+9816770569) + "	Page ";
	       record = page_header + "1" + $CRLF + printed_by_line;
	       IF file_count > 1 THEN record = ff + record;
	       OutFileId = $Open (temporary_file,$Output);
	       CALL $Write (OutFileId,record);
	       CALL $Close (OutFileId);
	       copy_count = copy_count + 1;
	       DOCOMMAND ORIGINAL "APPEND " + temporary_file + " " + 
		    output_file TO command_echo;
	       IF header = NO
	       THEN DOCOMMAND ORIGINAL "APPEND " + $FILEL + " " + output_file
	       ELSE BEGIN ! Copy file inserting page headers
		    InFileId = $Open($FILEL,$Input);
		    record = $Read(InFileId);
		    OutFileId = $Open(output_file,$Append);
		    page_number = 1;
		    line_number = 6;
		    WHILE $Eof(InFileId) = 0 DO
			 BEGIN
			 ff_loc = $SEARCH(record,ff);
			 IF ff_loc > 0 THEN
			      BEGIN ! remove FF
			      IF page_number > 1 THEN line_number = page_size; 
			      record = record[1:ff_loc-1] + record[ff_loc+1:*]
			      END;
			 IF line_number >= page_size THEN
			      BEGIN ! print page header
			      IF footer = YES THEN CALL $Write (OutFileId,
				   $CRLF + page_header + $STRING(page_number));
			      page_number = page_number + 1;
			      line_number = 3;
			      CALL $Write (OutFileId,ff + page_header +
				   $STRING(page_number) + $CRLF)
			      END;
			 line_number = line_number + 1;
			 CALL $Write (OutFileId,record);
			 record = $Read(InFileId)
			 END;
		    IF footer = YES THEN
			 BEGIN
			 WHILE line_number < page_size DO
			      BEGIN
			      CALL $Write (OutFileId,"");
			      line_number = line_number + 1
			      END;
			 CALL $Write (OutFileId,$CRLF + page_header +
			       $STRING(page_number))
			 END;
		    CALL $Close (InFileId);
		    CALL $Close (OutFileId)
		    END ! Copy file inserting page headers
	  END;  ! make next copy
     cycle: NOP
     END
UNTIL $Nextfile = 0;

DOCOMMAND ORIGINAL "DELETE " + temporary_file TO command_echo;

DOCOMMAND ORIGINAL "SET FILE GENERATION-RETENTION-COUNT " + output_file
     + " 0" TO command_echo;

IF print = YES 
THEN DOCOMMAND ORIGINAL "PRINT /AFTER:+0:0:10 /NOHEADER " + output_file
ELSE DISPLAY " Listings on file " + output_file
END; ! PQ
